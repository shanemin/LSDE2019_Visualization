{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///./maps.js","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts"],"names":["__webpack_require__","d","__webpack_exports__","ZoomControl","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","_super","_this","call","this","_chart","className","align","valign","layout","padding","interfaceColors","plusButton","createChild","shouldClone","label","text","slider","background","fill","getFor","fillOpacity","events","on","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","applyTheme","event","property","fixLayout","undefined","_disposers","push","prototype","x","y","width","height","Object","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","sprite","target","spritePoint","chart","maxPower","Math","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pixelHeight","zoomLevel","pow","zoomToGeoPoint","zoomGeoPoint","defineProperty","get","set","updateThumb","zoomOut","body","ev","topParent","hasFocused","isKey","isFocused","zoomIn","minHeight","min","stepCount","visible","minWidth","pixelWidth","isDown","step","pixelY","pixelX","createBackground","registeredClasses","MapObject_MapObject","MapObject","isMeasured","clickable","tslib_es6","validate","series","itemReaderText","Container","Registry","MapImage_MapImage","MapImage","getPropertyValue","value","setPropertyValue","validatePosition","Type","latitude","longitude","moveTo","projection","convert","MapPolygon_MapPolygon","MapPolygon","polygon","Polygon","InterfaceColorSet","stroke","strokeOpacity","tooltipPosition","nonScalingStroke","multiGeoPolygon","points","projectGeoArea","measureElement","dataItem","north","south","east","west","normalizePoint","geoPoint","wrapAngleTo180","asin","sin","utils_Math","latitude180","abs","normalizeMultiline","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","angle","geoToPoint","Projection_Projection","Projection","deltaLongitude","deltaLatitude","deltaGama","centerPoint","scale","geoArea","clippedGeoArea","clipGeoArea","convertGeoArea","projectGeoLine","geoLine","convertGeoLine","clipGeoLine","getClipRectangle1","getClipRectangle2","getRect1","getRect2","clippedLine","clipRectangle1","clipRectangle2","i","len","length","clippedSegments","clipLine","concat","clippedSegments2","clippedArea","rect1","rect2","surface","hole","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","convertedPoints","convertedAreaPoints","convertedSurface","s","slen","convertedHole","hlen","convertedSegmentPoints","rotate","pointInRadians","project","invert","unproject","unrotate","lambda","phi","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","cos","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","k","atan2","subjectPolyline","clipPolygon","cp1","cp2","e","inside","p","intersection","dc","dp","n1","n2","n3","j","inputList","subjectPolygon","outputList","geoPoints","r1","r2","intermediatePoint","pointA","pointB","position","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","a","delta","sqrt","A","B","phi3","lambda3","MapChart_MapChartDataItem","MapChartDataItem","SerialChart","MapChart_MapChart","MapChart","scaleRatio","zoomDuration","zoomEasing","Ease","_prevZoomGeoPoint","maxPanOut","homeZoomLevel","zoomStep","once","handleAllInited","seriesContainer","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","zIndex","updateExtremes","chartContainer","parent","inited","_mapAnimation","stop","updateScaleRatio","_zoomGeoPointReal","each","updateTooltipBounds","chartContainerBg","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","Interaction","_zoomControl","Keyboard","getEventKey","pan","mouseWheelBehavior","goHome","ww","seriesWidth","hh","seriesHeight","maxWidth","max","maxHeight","applyInternalDefaults","svgPoint","Utils","htmlContainer","svgContainer","cssScale","svgPointToGeo","handleWheel","shift","_mouseWheelDisposer","dispose","wheelable","invalidateProjection","pWest","pEast","pNorth","pSouth","Iterator","iterator","northPoint","southPoint","westPoint","eastPoint","vScale","innerWidth","hScale","innerHeight","Infinity","projectionScaleChanged","northPoint2","westPoint2","_centerGeoPoint","definedBBox","invalidate","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","_geodata","geodata","invalidateData","_dataUsers","center","duration","mapPoint","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","mapObject","dataItem_1","bbox","polygonPoint","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","SmallMap","removeDispose","zoomControl","createSeries","MapSeries","_dataSources","getDataSource","component","loadData","setDataSourceEvents","processConfig","config","createClassInstance","type","configOrder","b","asIs","field","homeGeoPoint","centerGeoPoint","setPaper","paper","hideOverflow","setLegend","legend","MapLineObject_MapLineObject","MapLineObject","adjustRotation","mapLine","positionToPoint","rotation","MapLine_MapLine","MapLine","createLine","line","Color","shortestDistance","Polyline","multiGeoLine","images","image","map","hasKey","getKey","imagesToConnect","_a","_b","newMultiGeoLine","newGeoLine","plen","geoPointA","geoPointB","previousPoint","segments","_arrow","lineObjects","handleGlobalScale","_lineObjects","List","handleLineObjectAdded","template","mapLineObject","newValue","arrow","triangle","Triangle","Percent","horizontalCenter","verticalCenter","copyFrom","source","clone","getTooltipX","getTooltipY","MapSpline_MapSpline","MapSpline","Polyspline","tensionX","tensionY","MapArc_MapArc","MapArc","Polyarc","multiPolygonToGeo","multiPolygon","multiGeoArea","multiPointToGeo","multiLineToGeo","multiLine","pointToGeo","MapPolygonSeries_MapPolygonSeriesDataItem","MapPolygonSeriesDataItem","_mapPolygon","mapPolygon_1","mapPolygons","create","addSprite","Disposer","removeValue","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","MapPolygonSeries_MapPolygonSeries","MapPolygonSeries","parsingStepDuration","dataFields","createDataItem","processIncExc","clear","validateData","data","_parseDataFrom","useGeodata","geoJSON","features","indexOf","geometry","console","feature","id_1","id","this_1","checkInclude","include","exclude","coordinates","dataObject","utils_Array","properties","dataItems","moveValue","_mapPolygons","polygonTemplate","handleObjectAdded","getPolygonById","dataContext","MapLineSeries_MapLineSeriesDataItem","MapLineSeriesDataItem","_mapLine","mapLine_1","mapLines","_line","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","MapLineSeries_MapLineSeries","MapLineSeries","_mapLines","lineTemplate","MapSplineSeries_MapSplineSeriesDataItem","MapSplineSeriesDataItem","MapSplineSeries_MapSplineSeries","MapSplineSeries","MapImageSeries_MapImageSeriesDataItem","MapImageSeriesDataItem","_mapImage","mapImage_1","mapImages","_point","_geoPoint","mapImage","MapImageSeries_MapImageSeries","MapImageSeries","multiPoint","multiGeoPoint","_mapImages","validateDataElement","MapArcSeries_MapArcSeriesDataItem","MapArcSeriesDataItem","MapArcSeries_MapArcSeries","MapArcSeries","Mercator_Mercator","Mercator","atan","exp","PI","tan","Miller_Miller","Miller","Eckert6_Eckert6","Eckert6","Orthographic_Orthographic","Orthographic","len_1","prevPoint","i_1","extraPoints","splice","apply","window","am4maps","maps_namespaceObject","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","percentHeight","percentWidth","margin","moveToPosition","updateMapSize","rectangle","strokeWidth","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","dataUsers","interactionsEnabled","rectPoint","updateRectangle","ceil","afterDraw","maskRectangle"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\t//plusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\t//minusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\r\n\t\tlet plusButton = this.plusButton;\r\n\t\tlet minusButton = this.minusButton;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tlet slider = this.slider;\r\n\r\n\t\tplusButton.x = undefined;\r\n\t\tplusButton.y = undefined;\r\n\r\n\t\tminusButton.x = undefined;\r\n\t\tminusButton.y = undefined;\r\n\r\n\t\tthumb.x = undefined;\r\n\t\tthumb.y = undefined;\r\n\r\n\t\tslider.x = undefined;\r\n\t\tslider.y = undefined;\r\n\r\n\t\tplusButton.padding(6, 10, 6, 10);\r\n\t\tminusButton.padding(6, 10, 6, 10);\r\n\r\n\t\tminusButton.label.align = \"center\";\r\n\t\tminusButton.label.valign = \"middle\";\r\n\r\n\t\tplusButton.label.align = \"center\";\r\n\t\tplusButton.label.valign = \"middle\";\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tminusButton.width = percent(100);\r\n\t\t\tminusButton.height = undefined;\r\n\r\n\t\t\tthumb.width = percent(100);\r\n\t\t\tthumb.height = undefined;\r\n\r\n\t\t\tplusButton.width = percent(100);\r\n\t\t\tplusButton.height = undefined;\r\n\r\n\t\t\tslider.width = percent(100);\r\n\t\t\tminusButton.marginTop = 1;\r\n\t\t\tplusButton.marginBottom = 2;\r\n\r\n\t\t\tslider.height = 0;\r\n\r\n\t\t\tminusButton.toFront();\r\n\t\t\tplusButton.toBack();\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.maxX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\r\n\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\r\n\t\t\tminusButton.height = percent(100);\r\n\t\t\tminusButton.width = undefined;\r\n\r\n\t\t\tplusButton.height = percent(100);\r\n\t\t\tplusButton.width = undefined;\r\n\r\n\t\t\tthumb.height = percent(100);\r\n\t\t\tthumb.width = undefined;\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\t\t\tthumb.maxY = 0;\r\n\r\n\t\t\tslider.height = percent(100);\r\n\t\t\tslider.width = 0;\r\n\r\n\t\t\tminusButton.toBack();\r\n\t\t\tplusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A custom zoom level to use when `zoomToMapObject()` is called on this\r\n\t * map object.\r\n\t */\r\n\tzoomLevel?: number;\r\n\r\n\t/**\r\n\t * A custom point to use when `zoomToMapObject()` is called on this map\r\n\t * object.\r\n\t */\r\n\tzoomGeoPoint?: IGeoPoint;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s = 0, slen = surface.length; s < slen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s = 0, hlen = hole.length; s < hlen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param geoPoint Geo point (lat/long)\r\n\t * @return Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param point Screen point (x/y)\r\n\t * @return Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @param lambda [description]\r\n\t * @param phi    [description]\r\n\t * @return X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @param x X coordinate\r\n\t * @param y Y coordinate\r\n\t * @return Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j = 0; j < clipPolygon.length; ++j) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j = 0; j < clipPolygon.length; ++j) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; ++i) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Legend } from \"../Legend\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\nimport { Paper } from \"../../core/rendering/Paper\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tline?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLine?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLine?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * A map will start centered on this geographical point.\r\n\t */\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * A map will start zoomed to this level.\r\n\t */\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\tprotected _centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\t\tthis.zoomStep = 2;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", this.handleAllInited, this, false);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.visible = false;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.background.fillOpacity = 0;\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.parent = this;\r\n\t\tchartContainer.isMeasured = false;\r\n\t\tchartContainer.zIndex = -1;\r\n\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\tprotected handleAllInited() {\r\n\t\tlet inited = true;\r\n\t\tthis.seriesContainer.visible = true;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (!series.inited) {\r\n\t\t\t\tinited = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (inited) {\r\n\t\t\tthis.updateExtremes();\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tregistry.events.once(\"exitframe\", this.handleAllInited, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tif (this.setPropertyValue(\"projection\", projection)) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tlet pWest = this.west;\r\n\t\tlet pEast = this.east;\r\n\t\tlet pNorth = this.north;\r\n\t\tlet pSouth = this.south;\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif ($type.isNumber(this.east) && $type.isNumber(this.north)) {\r\n\t\t\t// must reset\r\n\t\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\t\tthis.projection.scale = 1;\r\n\r\n\t\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\t\tthis.projection.deltaLongitude = 0;\r\n\r\n\t\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\r\n\t\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: 0 });\r\n\t\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: 0 });\r\n\r\n\t\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\t\tlet scaleRatio: number;\r\n\r\n\t\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\t\tlet vScale: number = chartContainer.innerWidth / seriesWidth;\r\n\t\t\tlet hScale: number = chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\t\tif (vScale > hScale) {\r\n\t\t\t\tscaleRatio = hScale;\r\n\t\t\t} else {\r\n\t\t\t\tscaleRatio = vScale;\r\n\t\t\t}\r\n\t\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\t\tscaleRatio = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet projectionScaleChanged = false;\r\n\t\t\tif (this.projection.scale != scaleRatio) {\r\n\t\t\t\tthis.projection.scale = scaleRatio;\r\n\t\t\t\tprojectionScaleChanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\t\tlet northPoint2: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet westPoint2: IPoint = this.projection.convert({ longitude: this.west - this.deltaLongitude, latitude: 0 });\r\n\r\n\t\t\tthis._centerGeoPoint = this.projection.invert({ x: westPoint2.x + this.seriesWidth / 2, y: northPoint2.y + this.seriesHeight / 2 });\r\n\r\n\t\t\t//this.seriesContainer.width = this.seriesWidth; // not good, doesn't resize\r\n\t\t\t//this.seriesContainer.height = this.seriesHeight; // not good, doesn't resize\r\n\t\t\tthis.seriesContainer.definedBBox = { x: westPoint2.x, y: northPoint2.y, width: this.seriesWidth, height: this.seriesHeight };\r\n\r\n\t\t\tthis.updateScaleRatio();\r\n\r\n\t\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\r\n\t\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\r\n\t\t\tif (projectionScaleChanged || pWest != this.west || pEast != this.east || pNorth != this.north || pSouth != this.south) {\r\n\t\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param point      Center coordinate\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif (!point) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tlet mapPoint = $utils.svgPointToSprite(svgPoint, this);\r\n\r\n\t\tif (center) {\r\n\t\t\tmapPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param mapObject  Target map object\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tlet dataItem = mapObject.dataItem;\r\n\r\n\t\tif (dataItem && $type.isNumber(dataItem.zoomLevel)) {\r\n\t\t\tzoomLevel = dataItem.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tlet bbox = mapObject.polygon.bbox;\r\n\r\n\t\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\t\tzoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet geoPoint: IGeoPoint;\r\n\r\n\t\t\tif (dataItem && $type.hasValue(dataItem.zoomGeoPoint)) {\r\n\t\t\t\tgeoPoint = dataItem.zoomGeoPoint;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is more accurate\r\n\t\t\t\tlet polygonPoint = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\r\n\t\t\t\tlet seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\r\n\r\n\t\t\t\tgeoPoint = this.seriesPointToGeo(seriesPoint);\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param north     Latitude of the North-most boundary\r\n\t * @param east      Longitude of the East-most boundary\r\n\t * @param south     Latitude of the South-most boundary\r\n\t * @param west      Longitude of the West-most boundary\r\n\t * @param level     Adjust zoom level\r\n\t * @param center    Center on the given coordinate?\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * this.zoomStep, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / this.zoomStep, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param shift     Vertical and horizontal shift\r\n\t * @param duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\tvar point = $utils.spritePointToSvg({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 }, this);\r\n\t\treturn this.svgPointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value  Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\tthis.updateExtremes();\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param a  Element 1\r\n * @param b  Element 2\r\n * @return Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this._centerGeoPoint;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t * @ignore\r\n\t * @param paper Paper\r\n\t * @return true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tif (this.svgContainer) {\r\n\t\t\tthis.svgContainer.hideOverflow = true;\r\n\t\t}\r\n\r\n\t\treturn super.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.parent = this.chartContainer;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\tthis.createLine();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.line.parent = this;\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyline();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let i = 0, len = images.length; i < len; i++) {\r\n\t\t\tlet image = images[i];\r\n\t\t\tif ($type.isString(image)) {\r\n\t\t\t\tif (this.map.hasKey(image)) {\r\n\t\t\t\t\timage = <MapImage>this.map.getKey(image);\r\n\t\t\t\t\timages[i] = image;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine || [];\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1, plen = geoLine.length; p < plen; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude)) * 4;\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.handleGlobalScale();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.shouldClone = false;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\t//triangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\treturn this.line.positionToPoint(0.5).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\treturn this.line.positionToPoint(0.5).y;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyarc();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * `shortestDistance = true` is not supported by `MapArc`.\r\n\t *\r\n\t * Only [[MapLine]] supports it.\r\n\t *\r\n\t * @default false\r\n\t * @param value\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i = 0, len = multiPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0, len = multiLine.length; i < len; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0, len = multiGeoPolygon.length; i < len; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 250; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (type == \"LineString\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLine: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLine) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLine = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\tif (type == \"Point\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\tif ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\r\n\t\t\t\tdataItem.geoPoint = { latitude: mapImage.latitude, longitude: mapImage.longitude }\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param x  X\r\n\t * @param y  Y\r\n\t * @return Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t *\r\n\t * @param lambda  Lambda parameter\r\n\t * @param phi     Phi parameter\r\n\t * @return Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n *\n * ```\n * Copyright 2017 Mike Bostock\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t *\n\t * @param x  X\n\t * @param y  Y\n\t * @return Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t *\n\t * @param lambda  Lambda parameter\n\t * @param phi     Phi parameter\n\t * @return Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t *\r\n\t * @param x  X\r\n\t * @param y  Y\r\n\t * @return Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t *\r\n\t * @param lambda  Lambda parameter\r\n\t * @param phi     Phi parameter\r\n\t * @return Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t *\r\n\t * @param lambda  Lambda parameter\r\n\t * @param phi     Phi parameter\r\n\t * @return Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, len = clippedArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet len = surface.length;\r\n\r\n\t\t\t\tlet prevPoint = surface[len - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = null\n// module chunks = ","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet rectPoint: IPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.chart.seriesPointToGeo(rectPoint);\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel)// + rectangle.pixelWidth / 2);\r\n\t\trectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel)// + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts"],"sourceRoot":""}